/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.javampire.openscad.psi.OpenSCADTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad.flex</tt>
 */
class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDE_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\17\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\23"+
    "\10\1\26\1\40\3\10\1\23\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2"+
    "\46\1\26\1\47\1\50\1\0\1\51\5\10\1\52\3\0\1\53\1\54\13\10\1\55\1\44\1\56\1"+
    "\57\1\0\1\60\1\26\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\26\1\0\1\66"+
    "\3\10\1\52\1\67\1\22\2\10\1\64\1\70\1\71\1\72\2\26\3\10\1\73\10\26\1\74\1"+
    "\27\6\26\1\75\2\0\1\76\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\2\40\1\103"+
    "\1\104\1\105\2\10\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102\1\0\1\113"+
    "\1\50\1\103\1\114\1\105\2\10\1\74\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\1\124\1\26\1\103\1\35\1\34\2\10\1\74\1\125\1\107\1\44\1\126\1\127\1\26"+
    "\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\10\1\74\1\125\1\107\1\110\1\120\1"+
    "\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74\2\10\1\74"+
    "\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1\74\2\10\1"+
    "\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145\1\31\1\74"+
    "\4\10\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\10\1\23\1\37"+
    "\2\10\1\34\1\151\1\23\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\10\1\155\1\156"+
    "\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165\1\155\1\166"+
    "\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1\173\1\10\1"+
    "\40\3\10\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26\5\10\1\52"+
    "\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\10\1\203\1\204\1\0\1\170"+
    "\4\10\1\35\1\21\5\10\1\205\51\10\1\132\1\23\1\132\5\10\1\132\4\10\1\132\1"+
    "\23\1\132\1\10\1\23\7\10\1\132\10\10\1\206\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\40\114\10\1\104\2\10\1\40\2\10\1\46\11\10\1\131\1\127\1\26\1\10\1\31\1"+
    "\207\1\26\2\10\1\207\1\26\2\10\1\210\1\26\1\10\1\31\1\211\1\26\6\10\1\212"+
    "\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\10\1\26\5\10\1\216\10\10"+
    "\1\217\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\10\1\217\1\27\1\26\5\10"+
    "\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\10\1\157\1\2\6\10\1\174\1\76\3\0\1"+
    "\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\10\1\212\1\0\1\220\1\113\1\0\1"+
    "\160\1\26\1\221\1\2\1\26\1\222\3\10\1\101\1\201\1\0\1\66\4\10\1\64\1\0\1\2"+
    "\1\26\4\10\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\10\1\217\12\26\1\224\2\0\1"+
    "\225\1\226\1\26\30\10\4\0\1\76\2\26\1\75\42\10\2\217\4\10\2\217\1\10\1\227"+
    "\3\10\1\217\6\10\1\31\1\167\1\230\1\27\1\231\1\113\1\10\1\27\1\230\1\27\1"+
    "\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\10\1\27\3\10\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\10\1\242\1\243\1\244\2\26\5\10\1\127\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\245\1\246\1\26\4\10\1\35\1\21\7\10\1\42\1\26\1"+
    "\61\2\10\1\23\1\26\10\23\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\10\1\23\1\247\1\40\12\10\1\205\1\243\4\10\1\217\1\40\12\10\1\23"+
    "\2\26\3\10\1\46\6\26\170\10\1\217\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\217\41\10\1\27\2\10\1\0\1\246\2\26\5\10\1\157\1\75\1\250\3\10\1\61\12"+
    "\10\1\160\3\26\1\42\1\10\1\37\14\10\1\251\1\113\1\26\1\10\1\46\11\26\1\10"+
    "\1\252\1\253\2\10\1\52\2\26\1\127\6\10\1\113\1\26\1\66\5\10\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\10\1\64\1\170\2\10\1\157\1\0\1\2"+
    "\1\26\3\10\1\27\1\77\5\10\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\10\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\10\1\23\1\255\6\10\1\200\1\256\1\216\2\26"+
    "\1\257\1\10\1\52\1\260\1\26\3\261\1\26\2\23\22\26\4\10\1\52\1\262\1\0\1\160"+
    "\64\10\1\113\1\26\2\10\1\23\1\263\5\10\1\113\40\26\55\10\1\217\15\10\1\25"+
    "\4\26\1\23\1\26\1\263\1\264\1\10\1\74\1\23\1\167\1\265\15\10\1\25\3\26\1\263"+
    "\54\10\1\217\2\26\10\10\1\37\6\10\5\26\1\10\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\10\1\266\1\233\1\26\1\0\1\160\1\40\2\10\1\114"+
    "\1\40\2\10\1\46\1\267\12\10\1\23\3\37\1\270\1\271\2\26\1\272\1\10\1\141\2"+
    "\10\1\23\2\10\1\273\1\10\1\217\1\10\1\217\4\26\17\10\1\46\10\26\6\10\1\27"+
    "\20\26\1\274\20\26\3\10\1\27\6\10\1\127\5\26\3\10\1\23\2\26\3\10\1\46\6\26"+
    "\3\10\1\217\4\10\1\113\1\10\1\240\5\26\23\10\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\10\1\35\1\275\2\10\1\217\25\26\2\10\1\217\1\26\3\10\1\25\10\26\7\10"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\10\1\113\1\117\4\26\3\10\1\27\20\26\6"+
    "\10\1\217\1\26\2\10\1\217\1\26\2\10\1\46\21\26\11\10\1\127\66\26\1\222\6\10"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\10\1\0\1\277\2\26\3\10\1\127\1\0\1\160"+
    "\1\222\3\10\1\157\1\0\1\143\1\0\10\26\1\222\5\10\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\10\1\52\1\0\1\26\1\0\1\160\46\26\55\10\1\23\22\26\14\10\1\46"+
    "\63\26\5\10\1\23\72\26\7\10\1\127\130\26\10\10\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\10\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\10\1\31\10\10\1\31\1\306\1\307\1\10\1\310\1\141\7\10"+
    "\1\35\1\311\2\31\3\10\1\312\1\167\1\37\1\74\51\10\1\217\3\10\1\74\2\10\1\205"+
    "\3\10\1\205\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\74\3\10\1\74\2"+
    "\10\1\205\1\313\6\0\1\141\3\10\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\10\1\34\1\10\1\113\1\316\1\34\1\10\1\113\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\27\1\4\1\2\1\1\1\5\1\3\6\27\4\0\1\4\1\57\1\36\1\56\1\26\1\45\1\60\1\0"+
    "\1\50\1\51\1\11\1\34\1\43\1\44\1\32\1\10\12\31\1\47\1\42\1\6\1\25\1\7\1\46"+
    "\1\0\4\26\1\33\15\26\1\54\1\35\1\55\1\0\1\26\1\0\1\37\1\26\1\22\1\14\1\17"+
    "\1\20\2\26\1\24\2\26\1\16\1\12\1\21\1\13\2\26\1\41\1\40\1\23\1\15\5\26\1\52"+
    "\1\61\1\53\1\0\6\27\1\30\2\27\2\0\4\26\4\0\1\26\2\0\1\27\7\0\1\26\4\0\1\26"+
    "\5\0\7\26\1\0\2\26\4\0\4\26\16\0\5\26\7\0\1\26\1\0\1\26\1\0\5\26\1\0\2\26"+
    "\6\0\1\26\1\0\3\26\1\0\1\26\1\0\4\26\1\0\13\26\1\0\3\26\1\0\5\27\2\0\6\26"+
    "\1\0\7\26\1\0\1\26\15\0\1\26\1\0\15\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\1\27"+
    "\3\26\5\0\5\27\6\0\1\26\4\0\3\27\5\0\3\26\7\27\4\0\2\26\1\27\13\26\1\0\1\26"+
    "\7\27\2\26\2\27\1\0\4\27\2\26\2\27\3\26\2\0\1\26\7\0\1\27\1\26\1\27\6\26\3"+
    "\27\2\0\11\26\3\27\1\26\6\0\2\27\6\26\4\27\2\26\2\0\2\27\1\26\11\27\1\26\3"+
    "\27\1\26\5\27\2\0\1\26\3\27\4\0\1\26\1\0\6\26\4\0\13\27\1\0\4\27\6\26\3\27"+
    "\1\26\2\27\1\26\7\27\2\26\2\27\2\0\2\27\1\0\3\27\1\0\10\26\2\0\2\26\2\0\6"+
    "\26\1\0\1\26\3\0\4\26\2\0\1\27\1\26\7\27\2\0\2\27\2\0\3\27\1\26\5\0\2\26\1"+
    "\0\5\26\4\0\3\26\4\0\2\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\27\1\0\5\27\4\0"+
    "\2\27\2\0\3\27\3\0\1\27\7\0\4\26\1\0\1\26\7\0\4\27\3\26\1\27\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\27\1\0\3\27\2\0\1\26\11\0\1\27\1\26\1\0\6\26\3\0\3\26\1\0"+
    "\4\26\3\0\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\2\26\4\0\5\27\3\0\3\27\1\0\4"+
    "\27\2\0\1\26\6\0\1\27\4\26\1\0\5\26\3\0\1\26\7\27\1\0\2\27\5\0\2\27\3\0\2"+
    "\27\1\0\3\26\1\0\2\26\5\0\3\26\2\0\1\26\3\27\1\0\4\27\1\26\1\0\4\26\1\0\1"+
    "\26\4\0\1\27\4\0\6\27\1\0\1\27\3\0\2\27\4\0\1\26\1\27\2\26\7\27\4\0\10\26"+
    "\3\27\7\0\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0\3\26\1\0\1"+
    "\26\1\0\1\26\2\0\2\26\1\0\3\26\2\27\1\0\2\27\1\26\2\0\5\26\1\0\1\26\1\0\6"+
    "\27\2\0\2\27\2\0\4\26\5\0\1\27\1\0\1\27\1\0\1\27\4\0\2\27\5\26\3\27\6\0\1"+
    "\27\1\0\7\27\1\26\2\27\4\26\3\27\1\26\3\27\2\26\7\27\3\26\4\27\5\26\14\27"+
    "\1\26\1\27\3\26\1\0\7\26\2\0\3\27\2\26\3\27\3\0\2\26\2\27\4\0\1\26\1\0\2\27"+
    "\4\0\4\26\10\27\3\0\1\26\3\0\2\26\1\27\5\0\3\27\2\0\1\26\1\27\1\26\5\0\6\26"+
    "\2\0\5\27\3\26\3\0\10\27\5\26\2\27\3\0\3\26\3\27\1\0\5\27\4\26\1\27\4\26\3"+
    "\27\2\26\2\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\2\0\3\26\1\0\6\26\2\0\2\26\2"+
    "\1\5\27\5\0\1\26\5\0\6\27\1\0\1\27\3\0\4\27\11\0\1\26\4\0\1\26\1\0\5\26\2"+
    "\0\1\26\1\0\4\26\1\0\3\26\2\0\4\26\5\0\5\26\4\0\1\26\4\0\4\26\3\27\2\26\5"+
    "\0\2\27\2\0\3\26\6\27\1\0\2\26\2\0\4\26\1\0\2\26\1\27\3\26\1\27\4\26\1\27"+
    "\10\26\2\27\4\0\1\26\1\27\4\0\1\27\5\26\2\27\3\0\3\26\4\0\3\26\2\27\2\0\6"+
    "\26\1\0\3\27\1\0\2\27\5\0\5\26\5\0\1\26\1\27\3\26\1\0\2\26\1\0\7\26\2\0\1"+
    "\27\6\0\2\26\2\0\3\26\3\0\2\26\3\0\2\26\2\0\3\27\4\0\3\26\1\0\2\26\1\0\1\26"+
    "\5\0\1\27\2\0\1\26\3\0\1\26\2\0\2\26\3\27\1\0\2\27\1\0\3\27\2\0\1\27\2\0\1"+
    "\27\4\26\10\0\5\27\3\0\6\27\2\0\3\27\2\0\4\27\4\0\3\27\5\0\1\26\2\0\2\26\2"+
    "\0\4\26\1\0\4\26\1\0\1\26\1\0\6\26\2\0\5\26\1\0\4\26\1\0\4\26\2\0\2\27\1\0"+
    "\1\26\1\0\1\26\5\0\1\26\1\0\1\26\1\0\3\26\1\0\3\26\1\0\3\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\10\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\1\1\2\1\5\1\33\1\2"+
    "\1\34\1\35\4\0\1\36\1\37\1\40\1\41\11\7"+
    "\1\42\1\7\1\43\1\0\1\11\1\0\1\14\1\44"+
    "\1\45\1\46\1\0\1\40\5\0\1\41\1\47\3\7"+
    "\1\50\1\7\1\51\4\7\1\11\2\0\1\40\13\0"+
    "\2\47\2\7\1\0\1\52\1\53\2\7\1\54\1\7"+
    "\1\0\3\40\5\0\1\41\1\0\1\7\1\55\1\7"+
    "\1\56\1\7\3\0\1\40\2\0\2\40\1\57\2\40"+
    "\2\0\1\57\3\0\1\60\2\7\3\0\1\57\2\0"+
    "\2\40\3\0\2\7\2\0\2\40\3\0\1\61\1\0"+
    "\1\62\2\0\2\40\4\0\1\57\1\40\1\57\1\0"+
    "\1\57\1\0\1\40\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\372\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\372\0\u041a"+
    "\0\372\0\372\0\372\0\372\0\372\0\372\0\372\0\372"+
    "\0\372\0\372\0\372\0\372\0\372\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\372\0\372\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\372\0\372\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0226"+
    "\0\u0898\0\372\0\u08ca\0\u08fc\0\u092e\0\372\0\372\0\372"+
    "\0\372\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0226\0\u0bb8\0\u0226"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\372\0\u0e42\0\u0e74"+
    "\0\u0e74\0\u0a8c\0\u0ea6\0\u0ed8\0\372\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\372\0\u0226\0\u0fa0\0\u0fd2\0\u0226\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\372"+
    "\0\u11f8\0\u122a\0\u0226\0\u125c\0\u0226\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u0992\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\372\0\u1518\0\u154a\0\u157c\0\u0226"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u0ce4\0\u16a8\0\u16da"+
    "\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u0226\0\u19c8"+
    "\0\372\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u109a\0\u1b8a\0\u1130\0\u1bbc\0\u12f2\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\2\15\1\22\1\23\1\24"+
    "\1\15\1\6\1\7\1\25\1\26\1\15\1\27\1\6"+
    "\1\30\3\15\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\6\3\7\2\51\1\10\1\11\1\52"+
    "\1\13\1\14\2\15\1\16\1\17\1\20\1\21\2\15"+
    "\1\22\1\23\1\24\1\15\1\6\1\7\1\25\1\26"+
    "\1\15\1\27\1\6\1\30\3\15\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\53\5\54\1\55"+
    "\1\56\20\53\1\54\31\53\4\0\2\4\2\0\1\57"+
    "\70\0\1\60\1\0\1\61\3\0\1\62\117\0\5\7"+
    "\22\0\1\7\56\0\1\63\61\0\1\64\44\0\1\65"+
    "\1\66\62\0\1\15\1\67\11\15\1\0\4\15\1\0"+
    "\1\15\3\0\3\15\32\0\13\15\1\0\4\15\1\0"+
    "\1\15\3\0\3\15\32\0\7\15\1\70\3\15\1\0"+
    "\4\15\1\0\1\15\3\0\1\15\1\71\1\15\32\0"+
    "\5\15\1\72\5\15\1\0\4\15\1\0\1\15\3\0"+
    "\3\15\32\0\4\15\1\73\6\15\1\0\4\15\1\0"+
    "\1\15\3\0\3\15\32\0\1\15\1\74\1\15\1\75"+
    "\7\15\1\0\4\15\1\0\1\15\3\0\1\76\2\15"+
    "\32\0\13\15\1\0\4\15\1\0\1\15\3\0\2\15"+
    "\1\77\32\0\6\15\1\100\1\101\3\15\1\0\4\15"+
    "\1\0\1\15\3\0\3\15\45\0\1\102\53\0\1\103"+
    "\11\0\1\25\1\104\1\103\57\0\1\104\30\0\35\30"+
    "\1\105\1\106\23\30\25\0\1\107\114\0\1\110\62\0"+
    "\1\111\1\0\3\7\2\51\2\0\1\112\17\0\1\7"+
    "\41\0\1\113\1\66\50\0\6\53\2\0\53\53\5\54"+
    "\2\0\20\53\1\54\31\53\10\0\1\114\67\0\1\115"+
    "\56\0\1\116\47\0\5\62\4\0\13\117\1\0\1\117"+
    "\1\120\1\62\1\120\1\0\1\117\3\0\3\117\20\0"+
    "\2\65\2\0\56\65\11\121\1\122\50\121\12\0\2\15"+
    "\1\123\10\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\32\0\2\15\1\124\10\15\1\0\4\15\1\0\1\15"+
    "\3\0\3\15\32\0\5\15\1\125\5\15\1\0\4\15"+
    "\1\0\1\15\3\0\3\15\32\0\11\15\1\126\1\15"+
    "\1\0\4\15\1\0\1\15\3\0\3\15\32\0\13\15"+
    "\1\0\4\15\1\0\1\15\3\0\1\15\1\127\1\15"+
    "\32\0\13\15\1\0\4\15\1\0\1\15\3\0\2\15"+
    "\1\130\32\0\7\15\1\131\3\15\1\0\4\15\1\0"+
    "\1\15\3\0\3\15\32\0\4\15\1\132\6\15\1\0"+
    "\4\15\1\0\1\15\3\0\3\15\32\0\3\15\1\133"+
    "\7\15\1\0\4\15\1\0\1\15\3\0\3\15\32\0"+
    "\10\15\1\134\2\15\1\0\4\15\1\0\1\15\3\0"+
    "\3\15\51\0\1\135\2\0\1\136\7\0\1\136\34\0"+
    "\1\103\11\0\1\104\1\0\1\103\26\0\62\30\10\0"+
    "\1\137\51\0\1\113\1\140\1\141\1\142\1\113\1\140"+
    "\22\113\1\140\31\113\2\114\1\4\1\143\56\114\15\0"+
    "\1\144\70\0\1\145\36\0\1\146\1\147\1\146\1\150"+
    "\1\151\4\0\13\117\1\0\1\117\1\120\1\152\1\120"+
    "\1\0\1\117\3\0\3\117\32\0\13\117\1\0\1\117"+
    "\3\120\1\0\1\117\3\0\3\117\20\0\11\121\1\153"+
    "\50\121\10\154\1\155\1\122\50\154\12\0\3\15\1\156"+
    "\7\15\1\0\4\15\1\0\1\15\3\0\3\15\32\0"+
    "\5\15\1\157\5\15\1\0\4\15\1\0\1\15\3\0"+
    "\3\15\21\0\5\160\1\161\3\0\13\15\1\0\2\15"+
    "\1\125\1\15\1\0\1\15\3\0\3\15\32\0\5\15"+
    "\1\162\5\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\32\0\10\15\1\163\2\15\1\0\4\15\1\0\1\15"+
    "\3\0\3\15\32\0\13\15\1\0\4\15\1\0\1\15"+
    "\3\0\1\15\1\164\1\15\32\0\5\15\1\165\5\15"+
    "\1\0\4\15\1\0\1\15\3\0\3\15\32\0\4\15"+
    "\1\166\6\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\51\0\1\135\30\0\1\137\1\167\1\141\1\142\1\137"+
    "\1\167\22\137\1\167\31\137\1\113\1\140\1\141\1\142"+
    "\2\140\4\113\1\170\5\171\1\172\4\171\1\113\1\171"+
    "\1\113\1\140\2\113\1\171\3\113\3\171\20\113\4\0"+
    "\2\141\2\0\1\112\1\0\1\173\5\174\1\175\4\174"+
    "\1\0\1\174\4\0\1\174\3\0\3\174\22\0\1\141"+
    "\1\0\2\141\2\0\1\112\1\0\1\173\5\174\1\175"+
    "\4\174\1\0\1\174\4\0\1\174\3\0\3\174\22\0"+
    "\1\4\1\0\2\4\2\0\1\57\65\0\1\176\70\0"+
    "\1\177\41\0\1\146\57\0\1\146\1\147\1\146\1\150"+
    "\1\151\22\0\1\146\31\0\10\121\1\200\1\153\50\121"+
    "\11\154\1\201\50\154\12\0\4\15\1\202\6\15\1\0"+
    "\4\15\1\0\1\15\3\0\3\15\32\0\6\15\1\203"+
    "\4\15\1\0\4\15\1\0\1\15\3\0\3\15\21\0"+
    "\5\160\1\161\21\0\1\160\43\0\11\15\1\204\1\15"+
    "\1\0\4\15\1\0\1\15\3\0\3\15\32\0\5\15"+
    "\1\205\5\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\32\0\3\15\1\206\7\15\1\0\4\15\1\0\1\15"+
    "\3\0\3\15\20\0\1\137\1\167\1\141\1\142\2\167"+
    "\4\137\1\207\5\210\1\211\4\210\1\137\1\210\1\137"+
    "\1\167\2\137\1\210\3\137\3\210\20\137\1\113\1\212"+
    "\1\213\1\214\1\215\1\212\4\113\1\171\1\216\11\171"+
    "\1\217\2\171\1\220\1\171\1\113\1\171\3\113\3\171"+
    "\21\113\1\212\1\213\1\214\1\215\1\212\4\113\13\171"+
    "\1\217\2\171\1\220\1\171\1\113\1\171\3\113\3\171"+
    "\21\113\1\212\1\213\1\214\1\215\1\212\4\113\3\171"+
    "\1\221\7\171\1\217\2\171\1\220\1\171\1\113\1\171"+
    "\3\113\3\171\20\113\1\0\5\222\4\0\1\174\1\223"+
    "\11\174\1\224\4\174\1\0\1\174\3\0\3\174\21\0"+
    "\5\222\4\0\13\174\1\224\4\174\1\0\1\174\3\0"+
    "\3\174\21\0\5\222\4\0\3\174\1\225\7\174\1\224"+
    "\4\174\1\0\1\174\3\0\3\174\33\0\1\226\70\0"+
    "\1\227\37\0\10\154\1\155\1\201\50\154\12\0\5\15"+
    "\1\230\5\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\32\0\12\15\1\231\1\0\4\15\1\0\1\15\3\0"+
    "\3\15\32\0\2\15\1\232\10\15\1\0\4\15\1\0"+
    "\1\15\3\0\3\15\20\0\1\137\1\233\1\213\1\214"+
    "\1\234\1\233\4\137\1\210\1\235\11\210\1\236\2\210"+
    "\1\237\1\210\1\137\1\210\3\137\3\210\21\137\1\233"+
    "\1\213\1\214\1\234\1\233\4\137\13\210\1\236\2\210"+
    "\1\237\1\210\1\137\1\210\3\137\3\210\21\137\1\233"+
    "\1\213\1\214\1\234\1\233\4\137\3\210\1\240\7\210"+
    "\1\236\2\210\1\237\1\210\1\137\1\210\3\137\3\210"+
    "\20\137\1\113\1\212\1\213\1\214\2\212\4\113\1\170"+
    "\5\171\1\172\4\171\1\217\1\171\1\113\1\212\2\113"+
    "\1\171\3\113\3\171\20\113\1\0\3\222\2\213\2\0"+
    "\1\112\1\0\1\173\5\174\1\175\4\174\1\224\1\174"+
    "\1\0\1\222\2\0\1\174\3\0\3\174\21\0\1\222"+
    "\1\213\1\222\2\213\2\0\1\112\1\0\1\173\5\174"+
    "\1\175\4\174\1\224\1\174\1\0\1\222\2\0\1\174"+
    "\3\0\3\174\20\0\1\113\1\212\1\213\1\214\1\215"+
    "\1\212\17\113\1\217\2\113\1\212\32\113\1\212\1\213"+
    "\1\214\1\215\1\212\4\113\2\171\1\241\10\171\1\217"+
    "\2\171\1\220\1\171\1\113\1\171\3\113\3\171\21\113"+
    "\1\212\1\213\1\214\2\212\4\113\1\170\5\171\1\172"+
    "\4\171\1\217\2\171\1\220\1\171\1\113\1\171\3\113"+
    "\3\171\21\113\1\212\1\213\1\214\1\215\1\212\4\113"+
    "\7\171\1\242\3\171\1\217\2\171\1\220\1\171\1\113"+
    "\1\171\3\113\3\171\20\113\1\0\5\222\17\0\1\224"+
    "\2\0\1\222\32\0\5\222\4\0\2\174\1\243\10\174"+
    "\1\224\4\174\1\0\1\174\3\0\3\174\21\0\5\222"+
    "\4\0\7\174\1\244\3\174\1\224\4\174\1\0\1\174"+
    "\3\0\3\174\32\0\1\150\70\0\1\245\52\0\1\15"+
    "\1\246\11\15\1\0\4\15\1\0\1\15\3\0\3\15"+
    "\32\0\5\15\1\247\5\15\1\0\4\15\1\0\1\15"+
    "\3\0\3\15\20\0\1\137\1\233\1\213\1\214\2\233"+
    "\4\137\1\207\5\210\1\211\4\210\1\236\1\210\1\137"+
    "\1\233\2\137\1\210\3\137\3\210\21\137\1\233\1\213"+
    "\1\214\1\234\1\233\17\137\1\236\2\137\1\233\32\137"+
    "\1\233\1\213\1\214\1\234\1\233\4\137\2\210\1\250"+
    "\10\210\1\236\2\210\1\237\1\210\1\137\1\210\3\137"+
    "\3\210\21\137\1\233\1\213\1\214\2\233\4\137\1\207"+
    "\5\210\1\211\4\210\1\236\2\210\1\237\1\210\1\137"+
    "\1\210\3\137\3\210\21\137\1\233\1\213\1\214\1\234"+
    "\1\233\4\137\7\210\1\251\3\210\1\236\2\210\1\237"+
    "\1\210\1\137\1\210\3\137\3\210\20\137\1\113\1\212"+
    "\1\213\1\214\1\215\1\212\4\113\3\171\1\252\7\171"+
    "\1\217\2\171\1\220\1\171\1\113\1\171\3\113\3\171"+
    "\21\113\1\212\1\213\1\214\1\215\1\212\4\113\10\171"+
    "\1\253\2\171\1\217\2\171\1\220\1\171\1\113\1\171"+
    "\3\113\3\171\20\113\1\0\5\222\4\0\3\174\1\254"+
    "\7\174\1\224\4\174\1\0\1\174\3\0\3\174\21\0"+
    "\5\222\4\0\10\174\1\255\2\174\1\224\4\174\1\0"+
    "\1\174\3\0\3\174\35\0\1\256\56\0\7\15\1\257"+
    "\3\15\1\0\4\15\1\0\1\15\3\0\3\15\21\0"+
    "\5\260\1\261\3\0\13\15\1\0\2\15\1\247\1\15"+
    "\1\0\1\15\3\0\3\15\20\0\1\137\1\233\1\213"+
    "\1\214\1\234\1\233\4\137\3\210\1\262\7\210\1\236"+
    "\2\210\1\237\1\210\1\137\1\210\3\137\3\210\21\137"+
    "\1\233\1\213\1\214\1\234\1\233\4\137\10\210\1\263"+
    "\2\210\1\236\2\210\1\237\1\210\1\137\1\210\3\137"+
    "\3\210\20\137\1\113\1\212\1\213\1\214\1\215\1\212"+
    "\4\113\4\171\1\264\6\171\1\217\2\171\1\220\1\171"+
    "\1\113\1\171\3\113\3\171\21\113\1\212\1\213\1\214"+
    "\1\215\1\212\4\113\11\171\1\265\1\171\1\217\2\171"+
    "\1\220\1\171\1\113\1\171\3\113\3\171\20\113\1\0"+
    "\5\222\4\0\4\174\1\266\6\174\1\224\4\174\1\0"+
    "\1\174\3\0\3\174\21\0\5\222\4\0\11\174\1\267"+
    "\1\174\1\224\4\174\1\0\1\174\3\0\3\174\40\0"+
    "\1\150\42\0\5\260\1\261\21\0\1\260\31\0\1\137"+
    "\1\233\1\213\1\214\1\234\1\233\4\137\4\210\1\270"+
    "\6\210\1\236\2\210\1\237\1\210\1\137\1\210\3\137"+
    "\3\210\21\137\1\233\1\213\1\214\1\234\1\233\4\137"+
    "\11\210\1\271\1\210\1\236\2\210\1\237\1\210\1\137"+
    "\1\210\3\137\3\210\20\137\1\113\1\212\1\213\1\214"+
    "\1\215\1\212\4\113\5\171\1\272\5\171\1\217\2\171"+
    "\1\220\1\171\1\113\1\171\3\113\3\171\21\113\1\212"+
    "\1\213\1\214\1\215\1\212\4\113\12\171\1\273\1\217"+
    "\2\171\1\220\1\171\1\113\1\171\3\113\3\171\20\113"+
    "\1\0\5\222\4\0\5\174\1\274\5\174\1\224\4\174"+
    "\1\0\1\174\3\0\3\174\21\0\5\222\4\0\12\174"+
    "\1\275\1\224\4\174\1\0\1\174\3\0\3\174\20\0"+
    "\1\137\1\233\1\213\1\214\1\234\1\233\4\137\5\210"+
    "\1\276\5\210\1\236\2\210\1\237\1\210\1\137\1\210"+
    "\3\137\3\210\21\137\1\233\1\213\1\214\1\234\1\233"+
    "\4\137\12\210\1\277\1\236\2\210\1\237\1\210\1\137"+
    "\1\210\3\137\3\210\20\137\1\113\1\212\1\213\1\214"+
    "\1\215\1\212\4\113\1\171\1\300\11\171\1\217\2\171"+
    "\1\220\1\171\1\113\1\171\3\113\3\171\20\113\1\0"+
    "\5\222\4\0\1\174\1\301\11\174\1\224\4\174\1\0"+
    "\1\174\3\0\3\174\20\0\1\137\1\233\1\213\1\214"+
    "\1\234\1\233\4\137\1\210\1\302\11\210\1\236\2\210"+
    "\1\237\1\210\1\137\1\210\3\137\3\210\20\137\1\113"+
    "\1\212\1\213\1\214\1\215\1\212\4\113\7\171\1\272"+
    "\3\171\1\217\2\171\1\220\1\171\1\113\1\171\3\113"+
    "\3\171\20\113\1\0\5\222\4\0\7\174\1\274\3\174"+
    "\1\224\4\174\1\0\1\174\3\0\3\174\20\0\1\137"+
    "\1\233\1\213\1\214\1\234\1\233\4\137\7\210\1\276"+
    "\3\210\1\236\2\210\1\237\1\210\1\137\1\210\3\137"+
    "\3\210\20\137";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\13\1\1\11\1\1\15\11"+
    "\7\1\2\11\4\0\2\11\15\1\1\11\1\0\1\1"+
    "\1\0\4\11\1\0\2\1\4\0\15\1\2\0\1\1"+
    "\5\0\1\11\1\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\11\5\1\1\0\3\1\5\0\1\11"+
    "\1\0\5\1\3\0\1\1\2\0\5\1\2\0\1\11"+
    "\3\0\3\1\3\0\1\1\2\0\2\1\3\0\2\1"+
    "\2\0\2\1\3\0\1\1\1\0\1\11\2\0\2\1"+
    "\4\0\3\1\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 53: break;
          case 4: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 54: break;
          case 5: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 55: break;
          case 6: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 56: break;
          case 7: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 57: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 58: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 59: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 60: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 61: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 62: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 63: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 64: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 65: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 66: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 67: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 68: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 69: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 70: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 71: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 72: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 73: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 74: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 75: break;
          case 26: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 76: break;
          case 27: 
            { return OpenSCADTypes.INCLUDE_PATH;
            } 
            // fall through
          case 77: break;
          case 28: 
            { return OpenSCADTypes.INCLUDE_START;
            } 
            // fall through
          case 78: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.INCLUDE_END;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 80: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 81: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 82: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 83: break;
          case 34: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 35: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 85: break;
          case 36: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 86: break;
          case 37: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 87: break;
          case 38: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 88: break;
          case 39: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 89: break;
          case 40: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 41: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 43: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 44: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 46: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 47: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 97: break;
          case 48: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 49: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
