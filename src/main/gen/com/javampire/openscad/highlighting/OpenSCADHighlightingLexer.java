/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad_highlighter.flex</tt>
 */
class OpenSCADHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCLUDE_PATH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\17\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\23"+
    "\10\1\26\1\40\3\10\1\23\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2"+
    "\46\1\26\1\47\1\50\1\0\1\51\5\10\1\52\3\0\1\53\1\54\13\10\1\55\1\44\1\56\1"+
    "\57\1\0\1\60\1\26\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\26\1\0\1\66"+
    "\3\10\1\52\1\67\1\22\2\10\1\64\1\70\1\71\1\72\2\26\3\10\1\73\10\26\1\74\1"+
    "\27\6\26\1\75\2\0\1\76\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\2\40\1\103"+
    "\1\104\1\105\2\10\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102\1\0\1\113"+
    "\1\50\1\103\1\114\1\105\2\10\1\74\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\1\124\1\26\1\103\1\35\1\34\2\10\1\74\1\125\1\107\1\44\1\126\1\127\1\26"+
    "\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\10\1\74\1\125\1\107\1\110\1\120\1"+
    "\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74\2\10\1\74"+
    "\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1\74\2\10\1"+
    "\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145\1\31\1\74"+
    "\4\10\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\10\1\23\1\37"+
    "\2\10\1\34\1\151\1\23\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\10\1\155\1\156"+
    "\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165\1\155\1\166"+
    "\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1\173\1\10\1"+
    "\40\3\10\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26\5\10\1\52"+
    "\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\10\1\203\1\204\1\0\1\170"+
    "\4\10\1\35\1\21\5\10\1\205\51\10\1\132\1\23\1\132\5\10\1\132\4\10\1\132\1"+
    "\23\1\132\1\10\1\23\7\10\1\132\10\10\1\206\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\40\114\10\1\104\2\10\1\40\2\10\1\46\11\10\1\131\1\127\1\26\1\10\1\31\1"+
    "\207\1\26\2\10\1\207\1\26\2\10\1\210\1\26\1\10\1\31\1\211\1\26\6\10\1\212"+
    "\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\10\1\26\5\10\1\216\10\10"+
    "\1\217\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\10\1\217\1\27\1\26\5\10"+
    "\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\10\1\157\1\2\6\10\1\174\1\76\3\0\1"+
    "\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\10\1\212\1\0\1\220\1\113\1\0\1"+
    "\160\1\26\1\221\1\2\1\26\1\222\3\10\1\101\1\201\1\0\1\66\4\10\1\64\1\0\1\2"+
    "\1\26\4\10\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\10\1\217\12\26\1\224\2\0\1"+
    "\225\1\226\1\26\30\10\4\0\1\76\2\26\1\75\42\10\2\217\4\10\2\217\1\10\1\227"+
    "\3\10\1\217\6\10\1\31\1\167\1\230\1\27\1\231\1\113\1\10\1\27\1\230\1\27\1"+
    "\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\10\1\27\3\10\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\10\1\242\1\243\1\244\2\26\5\10\1\127\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\245\1\246\1\26\4\10\1\35\1\21\7\10\1\42\1\26\1"+
    "\61\2\10\1\23\1\26\10\23\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\10\1\23\1\247\1\40\12\10\1\205\1\243\4\10\1\217\1\40\12\10\1\23"+
    "\2\26\3\10\1\46\6\26\170\10\1\217\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\217\41\10\1\27\2\10\1\0\1\246\2\26\5\10\1\157\1\75\1\250\3\10\1\61\12"+
    "\10\1\160\3\26\1\42\1\10\1\37\14\10\1\251\1\113\1\26\1\10\1\46\11\26\1\10"+
    "\1\252\1\253\2\10\1\52\2\26\1\127\6\10\1\113\1\26\1\66\5\10\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\10\1\64\1\170\2\10\1\157\1\0\1\2"+
    "\1\26\3\10\1\27\1\77\5\10\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\10\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\10\1\23\1\255\6\10\1\200\1\256\1\216\2\26"+
    "\1\257\1\10\1\52\1\260\1\26\3\261\1\26\2\23\22\26\4\10\1\52\1\262\1\0\1\160"+
    "\64\10\1\113\1\26\2\10\1\23\1\263\5\10\1\113\40\26\55\10\1\217\15\10\1\25"+
    "\4\26\1\23\1\26\1\263\1\264\1\10\1\74\1\23\1\167\1\265\15\10\1\25\3\26\1\263"+
    "\54\10\1\217\2\26\10\10\1\37\6\10\5\26\1\10\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\10\1\266\1\233\1\26\1\0\1\160\1\40\2\10\1\114"+
    "\1\40\2\10\1\46\1\267\12\10\1\23\3\37\1\270\1\271\2\26\1\272\1\10\1\141\2"+
    "\10\1\23\2\10\1\273\1\10\1\217\1\10\1\217\4\26\17\10\1\46\10\26\6\10\1\27"+
    "\20\26\1\274\20\26\3\10\1\27\6\10\1\127\5\26\3\10\1\23\2\26\3\10\1\46\6\26"+
    "\3\10\1\217\4\10\1\113\1\10\1\240\5\26\23\10\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\10\1\35\1\275\2\10\1\217\25\26\2\10\1\217\1\26\3\10\1\25\10\26\7\10"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\10\1\113\1\117\4\26\3\10\1\27\20\26\6"+
    "\10\1\217\1\26\2\10\1\217\1\26\2\10\1\46\21\26\11\10\1\127\66\26\1\222\6\10"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\10\1\0\1\277\2\26\3\10\1\127\1\0\1\160"+
    "\1\222\3\10\1\157\1\0\1\143\1\0\10\26\1\222\5\10\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\10\1\52\1\0\1\26\1\0\1\160\46\26\55\10\1\23\22\26\14\10\1\46"+
    "\63\26\5\10\1\23\72\26\7\10\1\127\130\26\10\10\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\10\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\10\1\31\10\10\1\31\1\306\1\307\1\10\1\310\1\141\7\10"+
    "\1\35\1\311\2\31\3\10\1\312\1\167\1\37\1\74\51\10\1\217\3\10\1\74\2\10\1\205"+
    "\3\10\1\205\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\74\3\10\1\74\2"+
    "\10\1\205\1\313\6\0\1\141\3\10\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\10\1\34\1\10\1\113\1\316\1\34\1\10\1\113\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\27\1\4\1\2\1\1\1\5\1\3\6\27\4\0\1\4\1\75\1\36\1\74\1\26\1\63\1\76\1\0"+
    "\1\66\1\67\1\11\1\34\1\61\1\62\1\32\1\10\2\31\1\56\7\31\1\65\1\60\1\6\1\25"+
    "\1\7\1\64\1\0\4\26\1\33\15\26\1\72\1\35\1\73\1\0\1\43\1\0\1\37\1\53\1\22\1"+
    "\14\1\17\1\20\1\42\1\50\1\24\1\52\1\46\1\16\1\12\1\21\1\13\1\51\1\55\1\41"+
    "\1\40\1\23\1\15\1\57\1\47\1\44\1\54\1\45\1\70\1\77\1\71\1\0\6\27\1\30\2\27"+
    "\2\0\4\26\4\0\1\26\2\0\1\27\7\0\1\26\4\0\1\26\5\0\7\26\1\0\2\26\4\0\4\26\16"+
    "\0\5\26\7\0\1\26\1\0\1\26\1\0\5\26\1\0\2\26\6\0\1\26\1\0\3\26\1\0\1\26\1\0"+
    "\4\26\1\0\13\26\1\0\3\26\1\0\5\27\2\0\6\26\1\0\7\26\1\0\1\26\15\0\1\26\1\0"+
    "\15\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\1\27\3\26\5\0\5\27\6\0\1\26\4\0\3\27"+
    "\5\0\3\26\7\27\4\0\2\26\1\27\13\26\1\0\1\26\7\27\2\26\2\27\1\0\4\27\2\26\2"+
    "\27\3\26\2\0\1\26\7\0\1\27\1\26\1\27\6\26\3\27\2\0\11\26\3\27\1\26\6\0\2\27"+
    "\6\26\4\27\2\26\2\0\2\27\1\26\11\27\1\26\3\27\1\26\5\27\2\0\1\26\3\27\4\0"+
    "\1\26\1\0\6\26\4\0\13\27\1\0\4\27\6\26\3\27\1\26\2\27\1\26\7\27\2\26\2\27"+
    "\2\0\2\27\1\0\3\27\1\0\10\26\2\0\2\26\2\0\6\26\1\0\1\26\3\0\4\26\2\0\1\27"+
    "\1\26\7\27\2\0\2\27\2\0\3\27\1\26\5\0\2\26\1\0\5\26\4\0\3\26\4\0\2\26\1\0"+
    "\2\26\1\0\2\26\1\0\2\26\2\0\1\27\1\0\5\27\4\0\2\27\2\0\3\27\3\0\1\27\7\0\4"+
    "\26\1\0\1\26\7\0\4\27\3\26\1\27\2\0\1\26\1\0\2\26\1\0\3\26\2\27\1\0\3\27\2"+
    "\0\1\26\11\0\1\27\1\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1\0\2"+
    "\26\3\0\2\26\3\0\2\26\4\0\5\27\3\0\3\27\1\0\4\27\2\0\1\26\6\0\1\27\4\26\1"+
    "\0\5\26\3\0\1\26\7\27\1\0\2\27\5\0\2\27\3\0\2\27\1\0\3\26\1\0\2\26\5\0\3\26"+
    "\2\0\1\26\3\27\1\0\4\27\1\26\1\0\4\26\1\0\1\26\4\0\1\27\4\0\6\27\1\0\1\27"+
    "\3\0\2\27\4\0\1\26\1\27\2\26\7\27\4\0\10\26\3\27\7\0\2\26\1\0\1\26\2\0\2\26"+
    "\1\0\1\26\2\0\1\26\6\0\4\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1\0\3\26\2"+
    "\27\1\0\2\27\1\26\2\0\5\26\1\0\1\26\1\0\6\27\2\0\2\27\2\0\4\26\5\0\1\27\1"+
    "\0\1\27\1\0\1\27\4\0\2\27\5\26\3\27\6\0\1\27\1\0\7\27\1\26\2\27\4\26\3\27"+
    "\1\26\3\27\2\26\7\27\3\26\4\27\5\26\14\27\1\26\1\27\3\26\1\0\7\26\2\0\3\27"+
    "\2\26\3\27\3\0\2\26\2\27\4\0\1\26\1\0\2\27\4\0\4\26\10\27\3\0\1\26\3\0\2\26"+
    "\1\27\5\0\3\27\2\0\1\26\1\27\1\26\5\0\6\26\2\0\5\27\3\26\3\0\10\27\5\26\2"+
    "\27\3\0\3\26\3\27\1\0\5\27\4\26\1\27\4\26\3\27\2\26\2\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\2\0\3\26\1\0\6\26\2\0\2\26\2\1\5\27\5\0\1\26\5\0\6\27\1\0\1"+
    "\27\3\0\4\27\11\0\1\26\4\0\1\26\1\0\5\26\2\0\1\26\1\0\4\26\1\0\3\26\2\0\4"+
    "\26\5\0\5\26\4\0\1\26\4\0\4\26\3\27\2\26\5\0\2\27\2\0\3\26\6\27\1\0\2\26\2"+
    "\0\4\26\1\0\2\26\1\27\3\26\1\27\4\26\1\27\10\26\2\27\4\0\1\26\1\27\4\0\1\27"+
    "\5\26\2\27\3\0\3\26\4\0\3\26\2\27\2\0\6\26\1\0\3\27\1\0\2\27\5\0\5\26\5\0"+
    "\1\26\1\27\3\26\1\0\2\26\1\0\7\26\2\0\1\27\6\0\2\26\2\0\3\26\3\0\2\26\3\0"+
    "\2\26\2\0\3\27\4\0\3\26\1\0\2\26\1\0\1\26\5\0\1\27\2\0\1\26\3\0\1\26\2\0\2"+
    "\26\3\27\1\0\2\27\1\0\3\27\2\0\1\27\2\0\1\27\4\26\10\0\5\27\3\0\6\27\2\0\3"+
    "\27\2\0\4\27\4\0\3\27\5\0\1\26\2\0\2\26\2\0\4\26\1\0\4\26\1\0\1\26\1\0\6\26"+
    "\2\0\5\26\1\0\4\26\1\0\4\26\2\0\2\27\1\0\1\26\1\0\1\26\5\0\1\26\1\0\1\26\1"+
    "\0\3\26\1\0\3\26\1\0\3\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\13\7"+
    "\1\10\1\7\1\11\1\12\1\13\1\14\6\7\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\1\1\2\1\5"+
    "\1\33\1\2\1\34\1\35\4\0\1\36\1\37\1\40"+
    "\1\41\12\7\1\42\24\7\1\43\1\7\1\44\1\0"+
    "\1\11\1\0\1\14\23\7\1\45\1\46\1\47\1\0"+
    "\1\40\5\0\1\41\1\50\2\7\1\42\7\7\1\51"+
    "\4\7\1\52\22\7\1\11\1\0\23\7\1\0\1\40"+
    "\13\0\2\50\7\7\1\0\1\53\3\7\1\54\1\55"+
    "\7\7\1\56\4\7\1\42\13\7\1\57\4\7\1\0"+
    "\3\40\5\0\1\41\1\0\5\7\1\60\3\7\1\61"+
    "\1\55\15\7\3\0\1\40\2\0\2\40\1\62\2\40"+
    "\2\0\1\62\3\0\1\63\10\7\1\55\2\7\1\57"+
    "\5\7\3\0\1\62\2\0\2\40\3\0\15\7\1\42"+
    "\2\0\2\40\3\0\4\7\1\64\2\7\1\0\1\65"+
    "\3\7\2\0\2\40\2\0\7\7\2\0\1\62\1\40"+
    "\1\62\1\0\3\7\1\62\1\0\1\40\1\0\3\7"+
    "\1\0\1\7\1\57\2\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0140\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0140\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u0140\0\u0140"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0140\0\u0140\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0580\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u0580"+
    "\0\u12c0\0\u0140\0\u1300\0\u1340\0\u1380\0\u0140\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800"+
    "\0\u1840\0\u0140\0\u0140\0\u0140\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u0580"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u0580\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0"+
    "\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u2940\0\u0140\0\u2980\0\u29c0\0\u29c0\0\u1a00"+
    "\0\u2a00\0\u2a40\0\u0140\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u0140\0\u2c80\0\u2cc0\0\u2d00\0\u0580"+
    "\0\u0580\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u0580\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280"+
    "\0\u32c0\0\u0580\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u0140"+
    "\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u0580\0\u37c0"+
    "\0\u3800\0\u3840\0\u0580\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80"+
    "\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80"+
    "\0\u3dc0\0\u18c0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u0140\0\u3f00"+
    "\0\u3f40\0\u3f80\0\u0580\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0"+
    "\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4080\0\u4280"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u27c0"+
    "\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640"+
    "\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840"+
    "\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40"+
    "\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40"+
    "\0\u0580\0\u4c80\0\u4cc0\0\u4d00\0\u0140\0\u4d40\0\u4d80\0\u4dc0"+
    "\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0"+
    "\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u3480"+
    "\0\u51c0\0\u3540\0\u5200\0\u5240\0\u5280\0\u52c0\0\u3c40\0\u5300"+
    "\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500"+
    "\0\u5540\0\u5580";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\6\1\7\1\31\1\32\1\30"+
    "\1\33\1\6\1\34\1\35\1\36\1\37\6\30\1\40"+
    "\1\41\4\30\1\31\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\6\3\7\2\63\1\10"+
    "\1\11\1\64\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\6\1\7\1\31\1\32\1\30\1\33\1\6\1\34"+
    "\1\35\1\36\1\37\6\30\1\40\1\41\4\30\1\31"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\65\5\66\1\67\1\70\20\65\1\66\47\65"+
    "\4\0\2\4\2\0\1\71\106\0\1\72\1\0\1\73"+
    "\3\0\1\74\153\0\5\7\22\0\1\7\74\0\1\75"+
    "\77\0\1\76\62\0\1\77\1\100\100\0\1\30\1\101"+
    "\1\30\1\102\6\30\1\103\1\0\4\30\1\0\1\30"+
    "\3\0\1\104\20\30\32\0\6\30\1\105\4\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\12\30\1\106"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\107\3\30\1\0\4\30\1\0\1\30\3\0\1\30"+
    "\1\110\17\30\32\0\1\30\1\111\3\30\1\112\1\30"+
    "\1\113\2\30\1\114\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\4\30\1\115\3\30\1\116\2\30\1\0"+
    "\4\30\1\0\1\30\3\0\5\30\1\117\13\30\32\0"+
    "\1\30\1\120\1\30\1\121\1\122\6\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\123\20\30\32\0\1\30\1\124"+
    "\11\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\1\30\1\125\1\30\1\126\1\30\1\127\4\30\1\130"+
    "\1\0\4\30\1\0\1\30\3\0\2\30\1\131\6\30"+
    "\1\132\3\30\1\133\3\30\32\0\5\30\1\134\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\135\1\30\1\136"+
    "\16\30\32\0\1\137\5\30\1\140\1\141\3\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\45\0\1\142\64\0"+
    "\13\30\1\0\4\30\1\0\1\30\3\0\21\30\37\0"+
    "\1\143\11\0\1\31\1\144\1\143\22\0\1\31\52\0"+
    "\1\144\24\0\1\144\21\0\35\34\1\145\1\146\41\34"+
    "\12\0\10\30\1\147\1\150\1\30\1\0\4\30\1\0"+
    "\1\30\3\0\1\30\1\151\12\30\1\152\4\30\32\0"+
    "\3\30\1\153\1\30\1\154\2\30\1\155\1\156\1\157"+
    "\1\0\4\30\1\0\1\30\3\0\12\30\1\160\3\30"+
    "\1\161\2\30\32\0\1\30\1\162\3\30\1\163\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\164\20\30\32\0"+
    "\3\30\1\165\7\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\1\30\1\166\11\30\1\0\4\30\1\0"+
    "\1\30\3\0\1\167\1\30\1\170\16\30\32\0\5\30"+
    "\1\171\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\45\0\1\172\150\0\1\173\100\0\1\174\1\0\3\7"+
    "\2\63\2\0\1\175\17\0\1\7\57\0\1\176\1\100"+
    "\66\0\6\65\2\0\71\65\5\66\2\0\20\65\1\66"+
    "\47\65\10\0\1\177\105\0\1\200\74\0\1\201\65\0"+
    "\5\74\4\0\13\202\1\0\1\202\1\203\1\74\1\203"+
    "\1\0\1\202\3\0\17\202\1\203\1\202\20\0\2\77"+
    "\2\0\74\77\11\204\1\205\66\204\12\0\2\30\1\206"+
    "\10\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\4\30\1\207\6\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\7\30\1\210\3\30\1\0\4\30\1\0"+
    "\1\30\3\0\2\30\1\211\16\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\5\30\1\113\13\30\32\0"+
    "\6\30\1\212\4\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\6\30\1\213\4\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\2\30\1\214\7\30\1\215"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\5\30"+
    "\1\216\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\217\11\30\1\0\4\30\1\0\1\30"+
    "\3\0\3\30\1\113\15\30\32\0\7\30\1\113\1\30"+
    "\1\220\1\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\7\30\1\221\3\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\4\30\1\222\6\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\30\1\223\17\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\11\30\1\224\7\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\12\30"+
    "\1\113\6\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\2\30\1\225\16\30\32\0\7\30\1\226\3\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\227\11\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\4\30\1\230\6\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\2\30\1\231\16\30\32\0\4\30\1\232\2\30"+
    "\1\233\3\30\1\0\4\30\1\0\1\30\3\0\1\30"+
    "\1\113\17\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\14\30\1\234\4\30\32\0\12\30\1\235\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\2\30\1\236\16\30\32\0"+
    "\1\30\1\237\11\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\12\30\1\240\1\0\4\30\1\0\1\30"+
    "\3\0\2\30\1\113\16\30\32\0\4\30\1\241\6\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\5\30\1\242\13\30"+
    "\32\0\7\30\1\113\3\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\3\30\1\243\7\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\244\20\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\12\30\1\245\6\30\32\0"+
    "\10\30\1\246\1\247\1\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\51\0\1\250\2\0\1\251\21\0\1\250"+
    "\3\0\1\251\34\0\1\143\11\0\1\144\1\0\1\143"+
    "\22\0\1\144\21\0\100\34\12\0\1\30\1\152\11\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\252\20\30\32\0"+
    "\12\30\1\135\1\0\4\30\1\0\1\30\3\0\1\30"+
    "\1\253\17\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\1\30\1\113\17\30\32\0\13\30\1\0\4\30"+
    "\1\0\1\30\3\0\2\30\1\254\16\30\32\0\4\30"+
    "\1\255\6\30\1\0\4\30\1\0\1\30\3\0\1\256"+
    "\20\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\1\257\20\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\2\30\1\113\16\30\32\0\7\30\1\113\3\30"+
    "\1\0\4\30\1\0\1\30\3\0\3\30\1\135\15\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\11\30"+
    "\1\260\7\30\32\0\3\30\1\261\7\30\1\0\4\30"+
    "\1\0\1\30\3\0\2\30\1\262\16\30\32\0\3\30"+
    "\1\263\5\30\1\264\1\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\7\30\1\265\3\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\30\1\266\17\30\32\0\7\30"+
    "\1\267\3\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\4\30\1\270\6\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\4\30\1\271\6\30\1\0\4\30"+
    "\1\0\1\30\3\0\10\30\1\113\10\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\2\30\1\272\16\30"+
    "\32\0\1\30\1\273\11\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\2\30\1\274\16\30\30\0\1\275\67\0\1\176"+
    "\1\276\1\277\1\300\1\176\1\276\22\176\1\276\47\176"+
    "\2\177\1\4\1\301\74\177\15\0\1\302\106\0\1\303"+
    "\54\0\1\304\1\305\1\304\1\306\1\307\4\0\13\202"+
    "\1\0\1\202\1\203\1\310\1\203\1\0\1\202\3\0"+
    "\17\202\1\203\1\202\32\0\13\202\1\0\1\202\3\203"+
    "\1\0\1\202\3\0\17\202\1\203\1\202\20\0\11\204"+
    "\1\311\66\204\10\312\1\313\1\205\66\312\12\0\3\30"+
    "\1\314\7\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\11\30\1\315\1\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\7\30\1\316\11\30\32\0\13\30\1\0\4\30"+
    "\1\0\1\30\3\0\2\30\1\232\16\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\30\1\317\17\30"+
    "\32\0\6\30\1\320\4\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\5\30\1\321\5\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\1\30\1\322\11\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\21\0\5\323"+
    "\1\324\3\0\13\30\1\0\2\30\1\216\1\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\7\30\1\325\11\30\32\0\5\30\1\326"+
    "\5\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\12\30\1\327\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\5\30\1\330\5\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\1\30\1\331\11\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\10\30\1\332\2\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\1\30"+
    "\1\156\11\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\1\30"+
    "\1\333\17\30\32\0\1\113\12\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\1\30\1\334\11\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\10\30\1\335"+
    "\2\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\5\30\1\331\5\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\4\30\1\113\6\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\10\30\1\336\2\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\1\30\1\152\17\30\32\0"+
    "\4\30\1\337\6\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\12\30\1\340\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\11\30\1\331\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\341\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\342\3\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\343\11\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\4\30\1\344\6\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\345\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\51\0\1\250"+
    "\24\0\1\250\33\0\7\30\1\346\3\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\347\4\30"+
    "\1\350\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\6\30\1\351\4\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\5\30\1\352\5\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\2\30\1\353\16\30\32\0\4\30\1\354"+
    "\6\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\5\30\1\355\5\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\1\355\20\30\32\0\11\30\1\113\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\7\30\1\356\3\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\357\20\30\32\0"+
    "\2\30\1\360\10\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\12\30\1\361\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\2\30\1\152\10\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\4\30\1\362\6\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\15\30\1\363\3\30"+
    "\32\0\5\30\1\364\5\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\13\30\1\365\5\30\32\0\13\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\30\1\366\17\30\20\0\1\275"+
    "\1\367\1\277\1\300\1\275\1\367\22\275\1\367\47\275"+
    "\1\176\1\276\1\277\1\300\2\276\4\176\1\370\5\371"+
    "\1\372\4\371\1\176\1\371\1\176\1\276\2\176\1\371"+
    "\3\176\17\371\1\176\1\371\20\176\4\0\2\277\2\0"+
    "\1\175\1\0\1\373\5\374\1\375\4\374\1\0\1\374"+
    "\4\0\1\374\3\0\17\374\1\0\1\374\22\0\1\277"+
    "\1\0\2\277\2\0\1\175\1\0\1\373\5\374\1\375"+
    "\4\374\1\0\1\374\4\0\1\374\3\0\17\374\1\0"+
    "\1\374\22\0\1\4\1\0\2\4\2\0\1\71\103\0"+
    "\1\376\106\0\1\377\57\0\1\304\75\0\1\304\1\305"+
    "\1\304\1\306\1\307\22\0\1\304\47\0\10\204\1\u0100"+
    "\1\311\66\204\11\312\1\u0101\66\312\12\0\4\30\1\u0102"+
    "\6\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\1\u0103\12\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\1\30\1\u0104\11\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\5\30\1\u0105\5\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\u0106\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\6\30"+
    "\1\u0107\4\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\7\30\1\362\3\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\21\0\5\323\1\324\21\0\1\323\61\0"+
    "\3\30\1\117\7\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\1\u0108\20\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\12\30\1\u0109\6\30\32\0\11\30\1\u010a\1\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\5\30"+
    "\1\u010b\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\2\30"+
    "\1\362\16\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\1\262\20\30\32\0\4\30\1\234\6\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\2\30\1\u010c"+
    "\10\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\7\30\1\u010d\3\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\1\30\1\u010e\17\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\2\30\1\u010f\16\30\32\0\3\30\1\u0110"+
    "\7\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\13\30\1\0\4\30\1\0\1\30\3\0\2\30\1\u0111"+
    "\16\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\17\30\1\113\1\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\2\30\1\242\16\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\3\30\1\322\15\30\32\0"+
    "\13\30\1\0\4\30\1\0\1\30\3\0\1\u0112\20\30"+
    "\32\0\10\30\1\262\2\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\10\30\1\u0113\2\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\362\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\2\30\1\234\16\30"+
    "\32\0\2\30\1\113\10\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\11\30\1\u0114\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\334\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\6\30\1\354\12\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\3\30"+
    "\1\u0115\5\30\1\u0116\7\30\32\0\7\30\1\u0117\3\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\5\30"+
    "\1\u0118\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\12\30\1\u0119\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\20\0\1\275\1\367\1\277\1\300\2\367\4\275"+
    "\1\u011a\5\u011b\1\u011c\4\u011b\1\275\1\u011b\1\275\1\367"+
    "\2\275\1\u011b\3\275\17\u011b\1\275\1\u011b\20\275\1\176"+
    "\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176\1\371\1\u0121"+
    "\11\371\1\u0122\2\371\1\u0123\1\371\1\176\1\371\3\176"+
    "\21\371\21\176\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176"+
    "\13\371\1\u0122\2\371\1\u0123\1\371\1\176\1\371\3\176"+
    "\21\371\21\176\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176"+
    "\3\371\1\u0124\7\371\1\u0122\2\371\1\u0123\1\371\1\176"+
    "\1\371\3\176\21\371\20\176\1\0\5\u0125\4\0\1\374"+
    "\1\u0126\11\374\1\u0127\4\374\1\0\1\374\3\0\21\374"+
    "\21\0\5\u0125\4\0\13\374\1\u0127\4\374\1\0\1\374"+
    "\3\0\21\374\21\0\5\u0125\4\0\3\374\1\u0128\7\374"+
    "\1\u0127\4\374\1\0\1\374\3\0\21\374\33\0\1\u0129"+
    "\106\0\1\u012a\55\0\10\312\1\313\1\u0101\66\312\12\0"+
    "\5\30\1\u012b\5\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\1\u012c\20\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\10\30\1\u012d\10\30\32\0\11\30\1\362\1\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\2\30\1\u012e\16\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\2\30"+
    "\1\u012f\16\30\32\0\13\30\1\0\4\30\1\0\1\30"+
    "\3\0\1\30\1\234\17\30\32\0\12\30\1\u0130\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\13\30\1\0"+
    "\4\30\1\0\1\30\3\0\2\30\1\u0131\16\30\32\0"+
    "\2\30\1\u0132\10\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\4\30\1\u0133\6\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\11\30\1\u0134\1\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\2\30\1\u0135"+
    "\10\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\13\30\1\0\4\30\1\0\1\30\3\0\1\30\1\u0136"+
    "\17\30\32\0\10\30\1\234\2\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\11\30\1\113\7\30\32\0\5\30\1\u0137"+
    "\5\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\1\30\1\u0138\11\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\5\30\1\u0139\5\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\11\30\1\u013a\1\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\10\30\1\u013b"+
    "\2\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\1\30\1\u013c\11\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\20\0\1\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d"+
    "\4\275\1\u011b\1\u013f\11\u011b\1\u0140\2\u011b\1\u0141\1\u011b"+
    "\1\275\1\u011b\3\275\21\u011b\21\275\1\u013d\1\u011e\1\u011f"+
    "\1\u013e\1\u013d\4\275\13\u011b\1\u0140\2\u011b\1\u0141\1\u011b"+
    "\1\275\1\u011b\3\275\21\u011b\21\275\1\u013d\1\u011e\1\u011f"+
    "\1\u013e\1\u013d\4\275\3\u011b\1\u0142\7\u011b\1\u0140\2\u011b"+
    "\1\u0141\1\u011b\1\275\1\u011b\3\275\21\u011b\20\275\1\176"+
    "\1\u011d\1\u011e\1\u011f\2\u011d\4\176\1\370\5\371\1\372"+
    "\4\371\1\u0122\1\371\1\176\1\u011d\2\176\1\371\3\176"+
    "\17\371\1\176\1\371\20\176\1\0\3\u0125\2\u011e\2\0"+
    "\1\175\1\0\1\373\5\374\1\375\4\374\1\u0127\1\374"+
    "\1\0\1\u0125\2\0\1\374\3\0\17\374\1\0\1\374"+
    "\21\0\1\u0125\1\u011e\1\u0125\2\u011e\2\0\1\175\1\0"+
    "\1\373\5\374\1\375\4\374\1\u0127\1\374\1\0\1\u0125"+
    "\2\0\1\374\3\0\17\374\1\0\1\374\20\0\1\176"+
    "\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\17\176\1\u0122\2\176"+
    "\1\u011d\50\176\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176"+
    "\2\371\1\u0143\10\371\1\u0122\2\371\1\u0123\1\371\1\176"+
    "\1\371\3\176\21\371\21\176\1\u011d\1\u011e\1\u011f\2\u011d"+
    "\4\176\1\370\5\371\1\372\4\371\1\u0122\2\371\1\u0123"+
    "\1\371\1\176\1\371\3\176\21\371\21\176\1\u011d\1\u011e"+
    "\1\u011f\1\u0120\1\u011d\4\176\7\371\1\u0144\3\371\1\u0122"+
    "\2\371\1\u0123\1\371\1\176\1\371\3\176\21\371\20\176"+
    "\1\0\5\u0125\17\0\1\u0127\2\0\1\u0125\50\0\5\u0125"+
    "\4\0\2\374\1\u0145\10\374\1\u0127\4\374\1\0\1\374"+
    "\3\0\21\374\21\0\5\u0125\4\0\7\374\1\u0146\3\374"+
    "\1\u0127\4\374\1\0\1\374\3\0\21\374\32\0\1\306"+
    "\106\0\1\u0147\70\0\11\30\1\u0148\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\13\30\1\0\4\30"+
    "\1\0\1\30\3\0\1\30\1\u0149\17\30\32\0\5\30"+
    "\1\u014a\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\4\30"+
    "\1\u014b\14\30\32\0\1\30\1\u014c\11\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\u0138\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\5\30"+
    "\1\u014d\5\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\1\u014e"+
    "\20\30\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\4\30\1\u014f\14\30\32\0\5\30\1\u0150\5\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\5\30\1\u0151"+
    "\5\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\7\30\1\331\3\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\2\30\1\u0152\10\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\4\30\1\u0153\14\30\32\0\11\30\1\u0154"+
    "\1\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\7\30\1\u0155\3\30\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\20\0\1\275\1\u013d\1\u011e\1\u011f\2\u013d\4\275"+
    "\1\u011a\5\u011b\1\u011c\4\u011b\1\u0140\1\u011b\1\275\1\u013d"+
    "\2\275\1\u011b\3\275\17\u011b\1\275\1\u011b\21\275\1\u013d"+
    "\1\u011e\1\u011f\1\u013e\1\u013d\17\275\1\u0140\2\275\1\u013d"+
    "\50\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275\2\u011b"+
    "\1\u0156\10\u011b\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b"+
    "\3\275\21\u011b\21\275\1\u013d\1\u011e\1\u011f\2\u013d\4\275"+
    "\1\u011a\5\u011b\1\u011c\4\u011b\1\u0140\2\u011b\1\u0141\1\u011b"+
    "\1\275\1\u011b\3\275\21\u011b\21\275\1\u013d\1\u011e\1\u011f"+
    "\1\u013e\1\u013d\4\275\7\u011b\1\u0157\3\u011b\1\u0140\2\u011b"+
    "\1\u0141\1\u011b\1\275\1\u011b\3\275\21\u011b\20\275\1\176"+
    "\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176\3\371\1\u0158"+
    "\7\371\1\u0122\2\371\1\u0123\1\371\1\176\1\371\3\176"+
    "\21\371\21\176\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176"+
    "\10\371\1\u0159\2\371\1\u0122\2\371\1\u0123\1\371\1\176"+
    "\1\371\3\176\21\371\20\176\1\0\5\u0125\4\0\3\374"+
    "\1\u015a\7\374\1\u0127\4\374\1\0\1\374\3\0\21\374"+
    "\21\0\5\u0125\4\0\10\374\1\u015b\2\374\1\u0127\4\374"+
    "\1\0\1\374\3\0\21\374\35\0\1\u015c\74\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\2\30\1\u015d\16\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\7\30"+
    "\1\u015e\11\30\32\0\7\30\1\u015f\3\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\5\30\1\u0160\5\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\7\30"+
    "\1\u0161\3\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\2\30"+
    "\1\331\16\30\32\0\11\30\1\354\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\2\30\1\u0162\10\30"+
    "\1\0\4\30\1\0\1\30\3\0\1\30\1\u0163\17\30"+
    "\21\0\5\u0164\1\u0165\3\0\13\30\1\0\2\30\1\u0150"+
    "\1\30\1\0\1\30\3\0\21\30\32\0\10\30\1\u0166"+
    "\2\30\1\0\4\30\1\0\1\30\3\0\21\30\32\0"+
    "\13\30\1\0\4\30\1\0\1\30\3\0\2\30\1\u0115"+
    "\16\30\32\0\1\u0167\12\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\12\30\1\215\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\13\30\1\0\4\30\1\0"+
    "\1\30\3\0\4\30\1\u0168\14\30\20\0\1\275\1\u013d"+
    "\1\u011e\1\u011f\1\u013e\1\u013d\4\275\3\u011b\1\u0169\7\u011b"+
    "\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b\3\275\21\u011b"+
    "\21\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275\10\u011b"+
    "\1\u016a\2\u011b\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b"+
    "\3\275\21\u011b\20\275\1\176\1\u011d\1\u011e\1\u011f\1\u0120"+
    "\1\u011d\4\176\4\371\1\u016b\6\371\1\u0122\2\371\1\u0123"+
    "\1\371\1\176\1\371\3\176\21\371\21\176\1\u011d\1\u011e"+
    "\1\u011f\1\u0120\1\u011d\4\176\11\371\1\u016c\1\371\1\u0122"+
    "\2\371\1\u0123\1\371\1\176\1\371\3\176\21\371\20\176"+
    "\1\0\5\u0125\4\0\4\374\1\u016d\6\374\1\u0127\4\374"+
    "\1\0\1\374\3\0\21\374\21\0\5\u0125\4\0\11\374"+
    "\1\u016e\1\374\1\u0127\4\374\1\0\1\374\3\0\21\374"+
    "\40\0\1\306\71\0\12\30\1\u016f\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\12\30\1\362\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\10\30\1\354\2\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\5\30\1\u0170\13\30"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\5\30"+
    "\1\u0171\13\30\32\0\11\30\1\u0172\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\21\0\5\u0164\1\u0165\21\0"+
    "\1\u0164\61\0\11\30\1\u0173\1\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\1\30\1\u0174\11\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\7\30\1\u0175"+
    "\3\30\1\0\4\30\1\0\1\30\3\0\21\30\20\0"+
    "\1\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275\4\u011b"+
    "\1\u0176\6\u011b\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b"+
    "\3\275\21\u011b\21\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d"+
    "\4\275\11\u011b\1\u0177\1\u011b\1\u0140\2\u011b\1\u0141\1\u011b"+
    "\1\275\1\u011b\3\275\21\u011b\20\275\1\176\1\u011d\1\u011e"+
    "\1\u011f\1\u0120\1\u011d\4\176\5\371\1\u0178\5\371\1\u0122"+
    "\2\371\1\u0123\1\371\1\176\1\371\3\176\21\371\21\176"+
    "\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d\4\176\12\371\1\u0179"+
    "\1\u0122\2\371\1\u0123\1\371\1\176\1\371\3\176\21\371"+
    "\20\176\1\0\5\u0125\4\0\5\374\1\u017a\5\374\1\u0127"+
    "\4\374\1\0\1\374\3\0\21\374\21\0\5\u0125\4\0"+
    "\12\374\1\u017b\1\u0127\4\374\1\0\1\374\3\0\21\374"+
    "\32\0\13\30\1\0\4\30\1\0\1\30\3\0\5\30"+
    "\1\362\13\30\32\0\11\30\1\u017c\1\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\6\30\1\331\4\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\4\30"+
    "\1\331\6\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\32\0\12\30\1\u017d\1\0\4\30\1\0\1\30\3\0"+
    "\21\30\32\0\2\30\1\u017e\10\30\1\0\4\30\1\0"+
    "\1\30\3\0\21\30\32\0\3\30\1\231\7\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\20\0\1\275\1\u013d"+
    "\1\u011e\1\u011f\1\u013e\1\u013d\4\275\5\u011b\1\u017f\5\u011b"+
    "\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b\3\275\21\u011b"+
    "\21\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275\12\u011b"+
    "\1\u0180\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b\3\275"+
    "\21\u011b\20\275\1\176\1\u011d\1\u011e\1\u011f\1\u0120\1\u011d"+
    "\4\176\1\371\1\u0181\11\371\1\u0122\2\371\1\u0123\1\371"+
    "\1\176\1\371\3\176\21\371\20\176\1\0\5\u0125\4\0"+
    "\1\374\1\u0182\11\374\1\u0127\4\374\1\0\1\374\3\0"+
    "\21\374\32\0\13\30\1\0\4\30\1\0\1\30\3\0"+
    "\2\30\1\u0183\16\30\32\0\1\30\1\u0184\11\30\1\0"+
    "\4\30\1\0\1\30\3\0\21\30\32\0\3\30\1\u0185"+
    "\7\30\1\0\4\30\1\0\1\30\3\0\21\30\20\0"+
    "\1\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275\1\u011b"+
    "\1\u0186\11\u011b\1\u0140\2\u011b\1\u0141\1\u011b\1\275\1\u011b"+
    "\3\275\21\u011b\20\275\1\176\1\u011d\1\u011e\1\u011f\1\u0120"+
    "\1\u011d\4\176\7\371\1\u0178\3\371\1\u0122\2\371\1\u0123"+
    "\1\371\1\176\1\371\3\176\21\371\20\176\1\0\5\u0125"+
    "\4\0\7\374\1\u017a\3\374\1\u0127\4\374\1\0\1\374"+
    "\3\0\21\374\32\0\3\30\1\u0187\7\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\32\0\7\30\1\u0188\3\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\4\30"+
    "\1\u0189\6\30\1\0\4\30\1\0\1\30\3\0\21\30"+
    "\20\0\1\275\1\u013d\1\u011e\1\u011f\1\u013e\1\u013d\4\275"+
    "\7\u011b\1\u017f\3\u011b\1\u0140\2\u011b\1\u0141\1\u011b\1\275"+
    "\1\u011b\3\275\21\u011b\20\275\12\0\2\30\1\354\10\30"+
    "\1\0\4\30\1\0\1\30\3\0\21\30\32\0\13\30"+
    "\1\0\4\30\1\0\1\30\3\0\4\30\1\u018a\14\30"+
    "\32\0\5\30\1\113\5\30\1\0\4\30\1\0\1\30"+
    "\3\0\21\30\32\0\6\30\1\232\4\30\1\0\4\30"+
    "\1\0\1\30\3\0\21\30\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\17\1\1\11\7\1\15\11"+
    "\7\1\2\11\4\0\2\11\43\1\1\11\1\0\1\1"+
    "\1\0\1\11\23\1\3\11\1\0\2\1\4\0\45\1"+
    "\1\0\23\1\1\0\1\1\5\0\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\7\1\1\0\1\11\42\1"+
    "\1\0\3\1\5\0\1\11\1\0\30\1\3\0\1\1"+
    "\2\0\5\1\2\0\1\11\3\0\22\1\3\0\1\1"+
    "\2\0\2\1\3\0\16\1\2\0\2\1\3\0\7\1"+
    "\1\0\1\11\3\1\2\0\2\1\2\0\7\1\2\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\3\1\1\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 57: break;
          case 5: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 58: break;
          case 6: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 67: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 71: break;
          case 19: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 72: break;
          case 20: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 73: break;
          case 21: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 77: break;
          case 25: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return OpenSCADTypes.INCLUDE_PATH;
            } 
            // fall through
          case 80: break;
          case 28: 
            { return OpenSCADTypes.INCLUDE_START;
            } 
            // fall through
          case 81: break;
          case 29: 
            { yybegin(YYINITIAL); return OpenSCADTypes.INCLUDE_END;
            } 
            // fall through
          case 82: break;
          case 30: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return OpenSCADTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return OpenSCADTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 86: break;
          case 34: 
            { return OpenSCADTypes.BUILTIN_EXPR;
            } 
            // fall through
          case 87: break;
          case 35: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 36: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 89: break;
          case 37: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 90: break;
          case 38: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 91: break;
          case 39: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return OpenSCADTypes.DOC_COMMENT;
            } 
            // fall through
          case 93: break;
          case 41: 
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 42: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return OpenSCADTypes.BUILTIN_OBJ;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 47: 
            { return OpenSCADTypes.BUILTIN_OP;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 50: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return OpenSCADTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 103: break;
          case 51: 
            { return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(INCLUDE_PATH); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
