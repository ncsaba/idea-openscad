{
    parserClass="com.javampire.openscad.parser.OpenSCADParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="OpenSCAD"
    psiImplClassSuffix="Impl"
    psiPackage="com.javampire.openscad.psi"
    psiImplPackage="com.javampire.openscad.psi.impl"

    elementTypeHolderClass="com.javampire.openscad.psi.OpenSCADTypes"
    elementTypeFactory="com.javampire.openscad.psi.OpenSCADElementFactory.getElementType"
    tokenTypeClass="com.javampire.openscad.psi.OpenSCADTokenType"

    extends(".*expr")=expr
    extends(".*obj")=object
    extends(".*op")=operator

    psiImplUtilClass="com.javampire.openscad.psi.impl.OpenSCADPsiImplUtil"
    parserUtilClass="com.javampire.openscad.parser.OpenSCADParserUtil"

}

openSCADFile ::= item*

private item ::= (
    statement
    | include_item
    | use_item
    | comment_item
)

private comment_item ::= C_STYLE_COMMENT | DOC_COMMENT | END_OF_LINE_COMMENT | BLOCK_COMMENT

include_item ::= INCLUDE_KEYWORD INCLUDE_START include_path_ref INCLUDE_END {
    methods=[getPresentation]
}
use_item ::= USE_KEYWORD INCLUDE_START include_path_ref INCLUDE_END {
    methods=[getPresentation]
}

include_path_ref ::= INCLUDE_PATH {
    mixin="com.javampire.openscad.psi.impl.OpenSCADImportElementImpl"
}

object ::= builtin_obj
         | module_call_obj
         | block_obj
         | compound_obj
         | empty_obj

builtin_obj ::= builtin_obj_ref arg_assignment_list SEMICOLON
builtin_obj_ref ::= "cube"
                  | "cylinder"
                  | "echo"
                  | "assert"
                  | "sphere"
                  | "polyhedron"
                  | "square"
                  | "circle"
                  | "polygon"
                  | "text"
                  | "surface"
                  | "child"
                  | "children"
                  | "import"
                  | "import_dxf"
                  | "import_stl" {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements=["com.javampire.openscad.psi.OpenSCADResolvableElement"]
    methods=[setName getNameIdentifier]
}

module_call_obj ::= module_obj_name_ref arg_assignment_list SEMICOLON
module_obj_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

block_obj ::= LBRACE statement* RBRACE

empty_obj ::= SEMICOLON

private statement ::= object | declaration

private declaration ::= variable_declaration | module_declaration | function_declaration

variable_declaration ::= IDENTIFIER EQUALS expr SEMICOLON {
    mixin="com.javampire.openscad.psi.impl.OpenSCADVariableDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.OpenSCADVariableStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

module_declaration ::= MODULE_KEYWORD IDENTIFIER arg_declaration_list statement {
    mixin="com.javampire.openscad.psi.impl.OpenSCADModuleDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.OpenSCADModuleStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

function_declaration ::= FUNCTION_KEYWORD IDENTIFIER arg_declaration_list EQUALS expr SEMICOLON {
    mixin="com.javampire.openscad.psi.impl.OpenSCADFunctionDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.OpenSCADFunctionStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

private compound_obj ::= operator object;

operator ::= builtin_op
           | modifier_op
           | module_call_op

module_call_op ::= module_op_name_ref arg_assignment_list
module_op_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

modifier_op ::= background_op
              | debug_op
              | root_op
              | disable_op

background_op ::= PERC
debug_op ::= HASH
root_op ::= EXCL
disable_op ::= MUL

builtin_op ::= else_op // else_op needs to be before if_op here
             | if_op
             | (common_op_ref arg_assignment_list)
             | (full_arg_op_identifier full_arg_declaration_list)

common_op_ref ::= "linear_extrude"
                | "rotate_extrude"
                | "rotate"
                | "translate"
                | "scale"
                | "resize"
                | "mirror"
                | "multmatrix"
                | "color"
                | "offset"
                | "minkowski"
                | "hull"
                | "union"
                | "difference"
                | "intersection"
                | "render"
                | "projection" {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[setName getNameIdentifier]
}

private full_arg_op_identifier ::= "intersection_for"
                                 | "assign"
                                 | FOR_KEYWORD
                                 | LET_KEYWORD

else_op ::= if_op object ELSE_KEYWORD
if_op ::= IF_KEYWORD LPARENTH expr RPARENTH

expr ::= conditional_group
       | boolean_group
       | add_group
       | mul_group
       | unary_group
       | primary_group

// private rules to define operators with the same priority
private boolean_group ::= and_expr | or_expr
private conditional_group ::= elvis_expr | conditional_expr
private unary_group ::= unary_plus_expr | unary_min_expr | unary_negate_expr
private mul_group ::= mul_expr | div_expr | modulo_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= paren_expr
                        | list_comprehension_expr
                        | range_expr
                        | vector_expr
                        | literal_expr
                        | builtin_expr
                        | function_call_expr
                        | index_expr
                        | qualification_expr
                        | variable_ref_expr

and_expr ::= expr AND expr
or_expr ::= expr OR expr
unary_min_expr ::= MINUS expr
unary_plus_expr ::= PLUS expr
unary_negate_expr ::= EXCL expr
div_expr ::= expr DIV expr
mul_expr ::= expr MUL expr
modulo_expr ::= expr PERC expr
minus_expr ::= expr MINUS expr
plus_expr ::= expr PLUS expr
conditional_expr ::= expr ( LT | GT | LE | GE | EQ | NE ) expr
elvis_expr ::= expr QUERY expr COLON expr
paren_expr ::= LPARENTH expr RPARENTH
vector_expr ::= LBRACKET [ vector_item ( COMMA+ (vector_item | &RBRACKET) )* ] RBRACKET { pin(".*")=1 }
private vector_item ::= expr { recoverWhile=recover_vector }
private recover_vector ::= ! (COMMA | RBRACKET)
index_expr ::= expr LBRACKET <<innerExpression>> RBRACKET
range_expr ::= LBRACKET expr COLON expr [ COLON expr ] RBRACKET
list_comprehension_expr ::= LBRACKET for_element (for_element | if_element | let_element)* expr RBRACKET
for_element ::= FOR_KEYWORD full_arg_declaration_list
if_element ::= IF_KEYWORD LPARENTH expr RPARENTH
let_element ::= LET_KEYWORD full_arg_declaration_list
builtin_expr ::= builtin_expr_ref arg_assignment_list
               | LET_KEYWORD full_arg_declaration_list expr
builtin_expr_ref ::= "cos"
                   | "sin"
                   | "tan"
                   | "acos"
                   | "asin"
                   | "atan"
                   | "atan2"
                   | "abs"
                   | "ceil"
                   | "concat"
                   | "cross"
                   | "exp"
                   | "floor"
                   | "ln"
                   | "len"
                   | "log"
                   | "lookup"
                   | "max"
                   | "min"
                   | "norm"
                   | "pow"
                   | "rands"
                   | "round"
                   | "sign"
                   | "sqrt"
                   | "str"
                   | "chr"
                   | "select"
                   | "search"
                   | "version"
                   | "version_num"
                   | "parent_module" {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[setName getNameIdentifier]
}

qualification_expr ::= expr DOT IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

literal_expr ::= TRUE_KEYWORD
               | FALSE_KEYWORD
               | UNDEF_KEYWORD
               | NUMBER_LITERAL
               | STRING_LITERAL

function_call_expr ::= function_name_ref arg_assignment_list
function_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}
arg_assignment_list ::= LPARENTH arg_assignment? ( COMMA+ arg_assignment )* RPARENTH {pin(".*")=1}
arg_assignment ::= [ parameter_reference EQUALS ] expr {
    recoverWhile=recover_arg
}
private recover_arg ::= ! (COMMA | RPARENTH)
parameter_reference ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getPresentation getNameIdentifier getReference]
}

arg_declaration_list ::= LPARENTH arg_declaration? ( COMMA arg_declaration? )* RPARENTH {pin(".*")=1}
arg_declaration ::= IDENTIFIER [EQUALS expr] {
    mixin="com.javampire.openscad.psi.impl.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getNameIdentifier]
    recoverWhile=recover_arg
}

full_arg_declaration_list ::= LPARENTH full_arg_declaration? ( COMMA+ full_arg_declaration )* RPARENTH {pin(".*")=1}
full_arg_declaration ::= IDENTIFIER EQUALS expr {
    mixin="com.javampire.openscad.psi.impl.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getNameIdentifier]
    recoverWhile=recover_arg
}

variable_ref_expr ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.impl.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}
