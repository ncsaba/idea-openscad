# GitHub Actions Workflow to handle the release process based on the pre release prepared with the Build workflow.
# Will delete the latest pre release and build a new release with version incrementation.

name: PromotePreRelease
on: [ workflow_dispatch ]

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 15
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: gradle/wrapper-validation-action@v1.0.4

      # Export pre release (snapshot) version
      - name: Export base version properties
        id: baseProperties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"

          echo "$VERSION"
          echo "::set-output name=baseVersion::$VERSION"

      # Set release version
      - name: Trim dev suffix
        id: setReleaseVersions
        shell: bash
        run: ./gradlew setversions --suffix=false

      # Build plugin using Jetbrains Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Export release version, name and changelog
      - name: Export new commit properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"

      # Publish the plugin to the marketplace
      - name: Publish Plugin
        env:
          intellijPublishToken: ${{ secrets.JETBRAINS_PUBLISH_TOKEN }}
        run: ./gradlew publishPlugin

      # Update Unreleased section with the current version in the changelog
      - name: Patch Changelog
        run: ./gradlew patchChangelog

      # Commit patched changelog and release version
      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Release ${{ steps.properties.outputs.version }}"
          skip_fetch: true

      # Get commit sha
      - shell: bash
        id: sha
        run: |
          RELEASE_SHA="$(git rev-parse HEAD)"
          echo "::set-output name=releaseSha::$RELEASE_SHA"

      # Create GitHub release
      - name: Create Release
        id: createRelease
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.properties.outputs.version }}
          tag: ${{ steps.properties.outputs.version }}
          commit: ${{ steps.properties.outputs.releaseSha }}
          body: ${{ steps.properties.outputs.changelog }}
          artifacts: ./build/distributions/${{ steps.properties.outputs.name }}-${{ steps.properties.outputs.version }}.zip
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}

      # Delete promoted pre release
      - name: Delete previous release
        id: deletePreviousRelease
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.baseProperties.outputs.baseVersion }}

      # Set next dev version
      - name: Increment version for dev
        id: setDevVersions
        shell: bash
        run: ./gradlew setversions --suffix=true --increment=technical

      # Commit dev version
      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "To dev version"
